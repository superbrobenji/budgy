"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
import { Stack, StackProps } from "aws-cdk-lib";
import { Construct } from "constructs";
import { AttributeType, Billing, TableV2 } from "aws-cdk-lib/aws-dynamodb";

interface DbStackProps extends StackProps {
    env: {
        account: string;
        region: string;
    };
}
export class DatabaseStack extends Stack {
    public readonly tables = {};
    constructor(scope: Construct, id: string, props: DbStackProps) {
        super(scope, id, props);

        const usersTable = new TableV2(this, "dynamoUsersStack", {
            partitionKey: { name: "Id", type: AttributeType.STRING },
            billing: Billing.onDemand(),
            tableName: "users",
        });

        const categoriesTable = new TableV2(this, "dynamodbCategoriesStack", {
            partitionKey: { name: "Id", type: AttributeType.STRING },
            sortKey: { name: "userID", type: AttributeType.STRING },
            billing: Billing.onDemand(), // Use on-demand billing
            tableName: "categories",
        });

        const itemsTable = new TableV2(this, "dynamodbItemsStack", {
            partitionKey: { name: "Id", type: AttributeType.STRING },
            sortKey: { name: "CategoryID", type: AttributeType.STRING },
            localSecondaryIndexes: [
                {
                    indexName: "userIndex",
                    sortKey: { name: "userId", type: AttributeType.STRING },
                },
            ],
            billing: Billing.onDemand(), // Use on-demand billing
            tableName: "items",
        });

        const transactionsTable = new TableV2(this, "dynamodbTransactionsStack", {
            partitionKey: { name: "Id", type: AttributeType.STRING },
            sortKey: { name: "ItemID", type: AttributeType.STRING },
            localSecondaryIndexes: [
                {
                    indexName: "userIndex",
                    sortKey: { name: "userId", type: AttributeType.STRING },
                },
            ],
            billing: Billing.onDemand(), // Use on-demand billing
            tableName: "transactions",
        });

        this.tables = {
            categoriesTable,
            itemsTable,
            transactionsTable,
            usersTable,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,
