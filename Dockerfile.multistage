# syntax=docker/dockerfile:1

FROM golang:1.21.6 AS build-stage
ENV NODE_VERSION=20

RUN apt-get update && apt-get install -y \
    software-properties-common \
    npm
RUN npm install npm@latest -g && \
    npm install n -g && \
    n latest

WORKDIR /app
COPY cmd/ ./cmd/
COPY core/ ./core/
COPY infrastructure/aws/sdk/ ./infrastructure/aws/sdk/
COPY infrastructure/persistence/ ./infrastructure/persistence/
COPY infrastructure/transport/ ./infrastructure/transport/
COPY go.sum ./
COPY go.mod ./
COPY makefile ./
RUN go mod download
RUN make build/docker
EXPOSE 8080
CMD ["/budgy"]

FROM build-stage AS test-stage
RUN make test/race

FROM node:20.7.0-alpine AS node
FROM alpine:latest AS release-stage
COPY --from=node /usr/lib /usr/lib
COPY --from=node /usr/local/lib /usr/local/lib
COPY --from=node /usr/local/include /usr/local/include
COPY --from=node /usr/local/bin /usr/local/bin

RUN apk --no-cache add ca-certificates && \
    addgroup -g 99 appuser && \
    adduser -D -u 99 -G appuser appuser

USER appuser

WORKDIR /
COPY --from=build-stage /budgy /budgy
EXPOSE 8080
ENTRYPOINT ["/budgy"]
